// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace oneGame
{
    using UnityEngine.SceneManagement;
    using MoreMountains.Tools;
    using MoreMountains.CorgiEngine;
    using QFramework;
    using DG.Tweening;
    using UnityEngine.UI;
    using UnityEngine;
    using UniRx;

    public class UIGamePanelData : QFramework.UIPanelData
    {
        /// <summary>
        /// 死亡次数
        /// </summary>
        public int DeathCount
        {
            get
            {
                return GameData.CurDeathCount;
            }
            set
            {
                GameData.CurDeathCount = value;
            }
        }

        /// <summary>
        /// 打开 GamePanel 的初始关卡
        /// </summary>
        public string InitLevelName = "LevelTest";

        // 默认普通模式
        public GameMode Mode = GameMode.ModeNormal;
    }


    public partial class UIGamePanel : QFramework.UIPanel, MMEventListener<CorgiEngineEvent>
    {
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIGamePanelData ?? new UIGamePanelData();

            GameModeLogic.Mode = mData.Mode;

            SceneManager.sceneLoaded += OnSceneLoaded;
            SceneManager.LoadScene(mData.InitLevelName);

            this.MMEventStartListening<CorgiEngineEvent>();

            TxtKeyboardHelp.Hide();

            // 更新UI
            TxtDeathCount.text = string.Format("Death Count : {0}", mData.DeathCount);
        }

        public void OnMMEvent(CorgiEngineEvent eventType)
        {
            if (eventType.EventType == CorgiEngineEventTypes.PlayerDeath)
            {
                mData.DeathCount++;
                // 更新UI
                TxtDeathCount.text = string.Format("Death Count : {0}", mData.DeathCount);
                // 播放死亡的声音
                this.SendMsg(new AudioSoundMsg(QAssetBundle.Sounds.HIT));
            }
            else if (eventType.EventType == CorgiEngineEventTypes.Pause)
            {
                var pausePanel = UIMgr.GetPanel<UIGamePausePanel>();
                if(pausePanel)
                {
                    UIMgr.ClosePanel<UIGamePausePanel>();
                }
                else
                {
                    UIMgr.OpenPanel<UIGamePausePanel>(UILevel.PopUI);
                }
            }
            else if (eventType.EventType == CorgiEngineEventTypes.UnPause)
            {
                UIMgr.ClosePanel<UIGamePausePanel>();
            }
        }

        void OnSceneLoaded(Scene scene, LoadSceneMode mode)
        {
            if (scene.name == "GameWin")
            {
                CloseSelf();
                UIMgr.OpenPanel<UIGameOverPanel>(new UIGameOverPanelData());
            }
            else if (scene.name.StartsWith("Level"))
            {
                TxtLevelName.text = scene.name;

                if (scene.name == "Level1")
                {
                    if (GameData.FirstTimeEnterLevel1)
                    {
                        ShowTxtKeyboardHelp();
                        GameData.FirstTimeEnterLevel1 = false;
                    }
                }
            }
            else
            {
                TxtLevelName.text = string.Empty;
            }
        }

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }

        protected override void RegisterUIEvent()
        {
            BtnKeyboardHelp.OnClickAsObservable().Subscribe(_ =>
            {
                SendMsg(new AudioSoundMsg("click"));
                ShowTxtKeyboardHelp();
            });

            BtnPause.OnClickAsObservable().Subscribe(_ =>
            {
                CorgiEngineEvent.Trigger(CorgiEngineEventTypes.Pause);
            });

        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
            this.MMEventStopListening<CorgiEngineEvent>();
            SceneManager.sceneLoaded -= OnSceneLoaded;
        }

        Sequence mSequence;

        /// <summary>
        /// 显示按键提示框
        /// </summary>
        private void ShowTxtKeyboardHelp()
        {
            if (mSequence != null)
            {
                mSequence.Kill();
                mSequence = null;
            }

            TxtKeyboardHelp.DOKill();

            TxtKeyboardHelp.Show();
            TxtKeyboardHelp.ColorAlpha(1.0f);

            mSequence = DOTween.Sequence()
                .Append(TxtKeyboardHelp.DOFade(1.0f, 5.0f))
                .Append(TxtKeyboardHelp.DOFade(0.0f, 1.0f))
                .OnComplete(() =>
                {
                    TxtKeyboardHelp.Hide();
                    mSequence = null;
                });
        }
    }
}
